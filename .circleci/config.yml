slack_image: &slack_image
  docker:
    - image: devatherock/simple-slack:0.7.0
      auth:
        username: $DOCKER_USERNAME
        password: $DOCKER_PASSWORD
        
docker_executor_image: &docker_executor_image
  docker:
    - image: cimg/openjdk:17.0
      auth:
        username: $DOCKER_USERNAME
        password: $DOCKER_PASSWORD

work_directory: &work_directory
  working_directory: ~/artifactory-badge

resource_class: &resource_class
  resource_class: small
  
release_filter: &release_filter
  filters:
    branches:
      only: non-existent-branch
    tags:
      only: /^v[0-9\.]+$/
      
pr_filter: &pr_filter
  filters:
    branches:
      ignore: master
  
executors:
  jdk-executor:
    docker:
      - image: devatherock/graalvm:ol8-java17-22.1.0-1
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    <<: *resource_class
    <<: *work_directory
    environment:
      # To generate swagger UI
      JAVA_TOOL_OPTIONS: '-Dmicronaut.openapi.views.spec=swagger-ui.enabled=true,swagger-ui.theme=flattop'
  docker-executor:
    <<: *docker_executor_image
    <<: *resource_class
    <<: *work_directory
  native-image-executor:
    <<: *docker_executor_image
    resource_class: medium
    <<: *work_directory
  machine-executor:
    machine:
      image: ubuntu-2204:2023.04.2
    resource_class: medium
    <<: *work_directory

version: 2.1
jobs:
  changelog_updater:
    docker:
    - image: devatherock/changelog-updater:0.1.0
      auth:
        username: $DOCKER_USERNAME
        password: $DOCKER_PASSWORD
    <<: *resource_class
    environment:
      VELA_BUILD_AUTHOR: "renovate[bot]"
      VELA_BUILD_AUTHOR_EMAIL: "29139614+renovate[bot]@users.noreply.github.com"
    steps:
      - add_ssh_keys:
          fingerprints:
            - "4a:86:fe:0e:c3:0e:ad:0d:1d:5c:3e:48:cf:28:39:5d"
      - checkout
      - run: sh /scripts/entry-point.sh
      
  validate_yamls:
    docker:
      - image: devatherock/drone-yaml-validator:2.1.0
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    <<: *work_directory
    <<: *resource_class
    steps:
      - checkout
      - run: sh /scripts/entry-point.sh

  test:
    executor: jdk-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/artifactory-badge
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies
      - run: |
          ./gradlew check sonarqube -Dsonar.login=$SONAR_TOKEN -Dgraalvm=true
      - store_test_results:
          path: build/test-results
  build:
    executor: jdk-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/artifactory-badge
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies
      - run: |
          ./gradlew build -x dependencyCheckAggregate -x spotlessApply -x jacocoTestReport -Dgraalvm=true
      - persist_to_workspace:
          root: ~/artifactory-badge
          paths:
            - build
      - store_test_results:
          path: build/test-results
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}
          
  publish:
    executor: native-image-executor
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: ~/artifactory-badge
      - run: |
          TAG=${CIRCLE_SHA1:0:8}
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker build \
            -t devatherock/artifactory-badge:$TAG \
            -t devatherock/artifactory-badge:latest \
            -t devatherock/artifactory-badge:amd64 .
          docker image push --all-tags devatherock/artifactory-badge
            
  publish_arm:
    machine:
      image: ubuntu-2004:2022.04.1
    resource_class: arm.medium
    steps:
      - checkout
      - attach_workspace:
          at: ~/artifactory-badge
      - run: |
          TAG=${CIRCLE_SHA1:0:8}-arm64
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker build \
            -t devatherock/artifactory-badge:$TAG \
            -t devatherock/artifactory-badge:arm64 .           
          
  dockerhub_readme:
    executor: machine-executor
    steps:
      - checkout
      - run: |
          docker run -v $PWD:/workspace \
              -e DOCKERHUB_USERNAME \
              -e DOCKERHUB_PASSWORD \
              -e DOCKERHUB_REPOSITORY='devatherock/artifactory-badge' \
              -e SHORT_DESCRIPTION='Badge generator for docker registries hosted in jfrog artifactory' \
              -e README_FILEPATH='/workspace/README.md' \
              peterevans/dockerhub-description:3.4.1
              
  integration_test:
    executor: machine-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/artifactory-badge
      - run: |
          make integration-test remote-integration-test
      - store_test_results:
          path: build/test-results
  
  publish_release:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: ~/artifactory-badge
      - run: |
          TAG=${CIRCLE_TAG#v}
          DEV_TAG=${CIRCLE_SHA1:0:8}
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker pull devatherock/artifactory-badge:$DEV_TAG
          docker tag devatherock/artifactory-badge:$DEV_TAG devatherock/artifactory-badge:$TAG
          docker tag devatherock/artifactory-badge:$DEV_TAG devatherock/artifactory-badge:${TAG}-amd64
          docker pull devatherock/artifactory-badge:${DEV_TAG}-arm64
          docker tag devatherock/artifactory-badge:${DEV_TAG}-arm64 devatherock/artifactory-badge:${TAG}-arm64
          docker push devatherock/artifactory-badge:$TAG
          docker push devatherock/artifactory-badge:${TAG}-amd64
          docker push devatherock/artifactory-badge:${TAG}-arm64

  notify:
    <<: *slack_image
    <<: *resource_class
    environment:
      TEXT: "Success: {{.CircleBuildUrl}} by {{.CircleUsername}}"
      CHANNEL: general
      TITLE: "Build completed"
    steps:
      - run: /bin/simpleslack -c "#33ad7f" || true

workflows:
  version: 2.1
  build_publish:
    jobs:
      - validate_yamls:
          context:
            - docker-credentials
          filters:
            branches:
              only: master
      - build:
          context:
            - docker-credentials
            - sonar-credentials
          requires:
            - validate_yamls    
      - publish:
          context:
            - docker-credentials
          requires:
            - build
      - publish_arm:
          context:
            - docker-credentials
          requires:
            - build
      - dockerhub_readme:
          context:
            - docker-credentials
            - dockerhub-readme-credentials
          requires:
            - publish
      - integration_test:
          context:
            - docker-credentials
          requires:
            - dockerhub_readme
      - notify:
          context:
            - docker-credentials
            - slack-webhook
          requires:
            - integration_test
            - publish_arm

  release:
    jobs:
      - publish_release:
          context:
            - docker-credentials
          <<: *release_filter
      - notify:
          context:
            - docker-credentials
            - slack-webhook
          <<: *release_filter
          requires:
            - publish_release
  pr_check:
    jobs:
      - build:
          context:
            - docker-credentials
          <<: *pr_filter
      - publish_arm:
          context:
            - docker-credentials
          requires:
            - build      