plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id 'io.micronaut.application' version '3.7.10'
    id 'java'
    id 'groovy'
    id 'jacoco'
    id 'org.sonarqube' version '5.1.0.4882'
    id 'com.github.kt3k.coveralls' version '2.12.2'
    id 'com.diffplug.spotless' version '6.25.0'
}

version "2.0.0"
group "io.github.devatherock"
sourceCompatibility = '11'
targetCompatibility = '11'

repositories {
    mavenCentral()
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("io.github.devatherock.*")
    }
}

configurations {
    // Force dependency versions to use dependencies without vulnerabilities
    all {
        resolutionStrategy {
            force 'org.jsoup:jsoup:1.18.1'
        }
    }
}

dependencies {
    def lombokVersion = '1.18.34'

    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    annotationProcessor("io.micronaut.openapi:micronaut-openapi")
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    annotationProcessor "io.micronaut:micronaut-graal"

    compileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    compileOnly group: 'com.google.code.findbugs', name: 'annotations', version: '3.0.1'
    compileOnly "org.graalvm.nativeimage:svm"

    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut.micrometer:micronaut-micrometer-core"
    implementation "io.micronaut:micronaut-management"
    implementation "io.swagger.core.v3:swagger-annotations"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-http-client"
    implementation "io.micronaut.cache:micronaut-cache-core"
    implementation "io.micronaut.cache:micronaut-cache-caffeine"

    implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '8.0'
    implementation group: 'org.codehaus.janino', name: 'janino', version: '3.1.12'
    implementation group: 'javax.inject', name: 'javax.inject', version: '1'
    implementation "ch.qos.logback:logback-classic:1.5.10"

    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation "io.micronaut:micronaut-inject-groovy"
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation "io.micronaut.test:micronaut-test-spock"

    testImplementation group: 'org.spockframework', name: 'spock-core', version: '2.1-groovy-3.0'
    testImplementation group: 'cglib', name: 'cglib-nodep', version: '3.3.0'
    testImplementation group: 'org.objenesis', name: 'objenesis', version: '3.4'
    testImplementation group: 'org.wiremock', name: 'wiremock', version: '3.9.1'
}

test.classpath += configurations.developmentOnly
mainClassName = "io.github.devatherock.Application"

test {
    useJUnitPlatform()
    if (Boolean.getBoolean('graalvm')) {
        jvmArgs("-agentlib:native-image-agent=access-filter-file=$projectDir/src/main/resources/graal/access-filter.json,config-output-dir=$projectDir/build/graal")
    }
    systemProperty 'micronaut.env.deduction', 'false'
}

// Generates resource-config.json file for graalvm
build.dependsOn(generateResourcesConfigFile)

tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

shadowJar {
    mergeServiceFiles()
}

run {
    classpath += configurations.developmentOnly
    jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
    systemProperties(System.properties)
}

ext.jacoco = [
    exclusions: [
        'io/github/devatherock/Application.class'
    ],
    coverageThresholds: [
        'io.github.devatherock.logback.LogbackConfigInitializer': [
            'BRANCH': 0.75,
            'COMPLEXITY': 0.62,
            'INSTRUCTION': 0.89,
            'LINE': 0.88
        ]
    ]
]
apply from: "${getPropertyValue('gradle.includes.location', 'https://raw.githubusercontent.com/devatherock/gradle-includes/master')}/integration.gradle"
apply from: "${getPropertyValue('gradle.includes.location', 'https://raw.githubusercontent.com/devatherock/gradle-includes/master')}/checks.gradle"

/**
 * Fetches the value of a gradle property
 *
 * @param propertyName
 * @param propertyValueDefault
 * @return the property value
 */
String getPropertyValue(String propertyName, String propertyValueDefault = null) {
    return project.hasProperty(propertyName) ? project[propertyName] : propertyValueDefault
}